generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model credencial {
  credencialID Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  usuario      usuario?
}

model usuario {
  userID            Int                 @id @default(autoincrement())
  nombres           String
  apellidos         String
  telefono          Int
  tipoUsuario       usuario_tipoUsuario
  credencialID      Int                @unique
  credencial        credencial         @relation(fields: [credencialID], references: [credencialID])
  alquileres        alquiler[]         // Propiedades publicadas
  rentas            renta[]            // Propiedades que renta
  pagosUsuario      pago_usuario[]
  usuarioPorGrupo   usuario_por_grupo[]
}

model alquiler {
  alquilerID        Int                         @id @default(autoincrement())
  categoria         alquiler_categoria
  descripcion       String?
  direccion         String
  precio            Float
  estadoPublicacion alquiler_estadoPublicacion @default(Disponible)
  ownerID           Int
  usuario           usuario                     @relation(fields: [ownerID], references: [userID])
  rentas            renta[]
}

model renta {
  rentalID       Int             @id @default(autoincrement())
  fechaInicio    DateTime?
  fechaFin       DateTime?
  estado         String?
  alquilerID     Int
  userID         Int?
  grupoID        Int?
  alquiler       alquiler        @relation(fields: [alquilerID], references: [alquilerID])
  usuario        usuario?        @relation(fields: [userID], references: [userID])
  grupo          grupo_a_rentar? @relation(fields: [grupoID], references: [grupoID])
  pagos          pago[]
}

model pago {
  pagoID     Int            @id @default(autoincrement())
  monto      Float
  metodoPago String?
  fecha      DateTime?
  estado     pago_estado     @default(Pendiente)
  rentalID   Int
  renta      renta           @relation(fields: [rentalID], references: [rentalID])
  detalles   pago_usuario[]
}

model pago_usuario {
  pagoUsuarioID Int                  @id @default(autoincrement())
  userID        Int
  pagoID        Int
  monto         Float
  estado        pago_usuario_estado @default(Pendiente)
  usuario       usuario             @relation(fields: [userID], references: [userID])
  pago          pago                @relation(fields: [pagoID], references: [pagoID])
}

model grupo_a_rentar {
  grupoID        Int                 @id @default(autoincrement())
  nombre         String
  descripcion    String?
  fechaCreacion  DateTime            @default(now())
  rentas         renta[]
  miembros       usuario_por_grupo[]
}

model usuario_por_grupo {
  grupoID Int
  userID  Int

  grupo   grupo_a_rentar @relation(fields: [grupoID], references: [grupoID])
  usuario usuario         @relation(fields: [userID], references: [userID])

  @@id([grupoID, userID])
}

enum usuario_tipoUsuario {
  Inquilino
  Propietario
}

enum alquiler_categoria {
  Casa
  Departamento
  Cuarto
  Oficina
}

enum alquiler_estadoPublicacion {
  Disponible
  Alquilado
}

enum pago_estado {
  Pendiente
  Pagado
  Denegado
}

enum pago_usuario_estado {
  Pendiente
  Pagado
  Denegado
}
